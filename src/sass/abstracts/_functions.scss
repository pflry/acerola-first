//
// Functions
// --------------------------------------------------

// Transparent helper black
/// @access public
/// @param {Opacity} $opacity - opacity value
/// @return {rgba black}
@function black($opacity) {
    @return rgba(0, 0, 0, $opacity);
}

// Transparent helper white
/// @access public
/// @param {Opacity} $opacity - opacity value
/// @return {rgba white}
@function white($opacity) {
    @return rgba(255, 255, 255, $opacity);
}

// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
    @return mix(white, $color, $percentage);
}

// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
}

// Dynamic text color
/// @access public
/// @param {Color} $color - background color
/// @return {black or white} - Lighter background, return dark color and inv.
@function dynamic-color($color) {
    @if (lightness($color) > 50) {
        @return black;
    }
    @else {
        @return white;
    }
}

/// Base path for assets (fonts, images...),
/// should not include trailing slash
/// @access public
/// @type String
$asset-base-path1: 'wp-content/themes/acerola-v19/dist';
$asset-base-path2: '../wp-content/themes/acerola-v19/dist';

/// Asset URL builder
/// @access private
/// @param {String} $type - Asset type, matching folder name
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the asset
@function assetimage($type, $file) {
    @return url($asset-base-path1 + '/' + $type + '/' + $file);
}

@function asseticon($type, $file) {
    @return url($asset-base-path2 + '/' + $type + '/' + $file);
}

/// Image asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the image
/// @require {function} asset
@function image($file) {
    @return assetimage('images', $file);
}

/// Icon asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the icon
/// @require {function} asset
@function icon($file) {
    @return asseticon('icons', $file);
}